name: Continuous Integration

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  # Code Quality and Linting
  lint:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy bandit safety
        pip install -r requirements.txt
        
    - name: Format check with Black
      run: |
        black --check --diff dt_project/ tests/
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 dt_project/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 dt_project/ --count --exit-zero --max-complexity=15 --max-line-length=120 --statistics
        
    - name: Type checking with mypy
      run: |
        mypy dt_project/ --ignore-missing-imports --no-strict-optional
        
    - name: Security check with bandit
      run: |
        bandit -r dt_project/ -f json -o bandit-report.json || true
        bandit -r dt_project/ --severity-level medium
        
    - name: Dependency safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit Tests
  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_quantum_trail
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-test-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate environment setup
      run: |
        python validate_env.py
        
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_quantum_trail
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci-cd
        FLASK_ENV: testing
      run: |
        pytest tests/ -v --cov=dt_project --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v3
      with:
        name: coverage-html
        path: htmlcov/

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [lint, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_quantum_trail
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_quantum_trail
      run: |
        alembic upgrade head
        
    - name: Start application
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_quantum_trail
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-integration
        FLASK_ENV: testing
      run: |
        python -m flask run --port=5001 &
        sleep 10  # Wait for app to start
        
    - name: Test API endpoints
      run: |
        curl -f http://localhost:5001/health || exit 1
        curl -f http://localhost:5001/api/simulation/status || exit 1
        
    - name: Test GraphQL endpoint
      run: |
        curl -X POST -H "Content-Type: application/json" -d '{"query": "query { systemStatus { status } }"}' http://localhost:5001/graphql
        
    - name: Clean up
      run: |
        pkill -f flask || true

  # Security Scan
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker:
    runs-on: ubuntu-latest
    name: Docker Build Test
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: quantum-trail:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --name test-container -d -p 5000:5000 quantum-trail:test
        sleep 15
        curl -f http://localhost:5000/health || exit 1
        docker stop test-container
        docker rm test-container

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    name: Performance Tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_quantum_trail
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Start application for load testing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_quantum_trail
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-perf
        FLASK_ENV: testing
      run: |
        python -m flask run --port=5002 &
        sleep 10
        
    - name: Run performance tests
      run: |
        # Create basic load test
        cat > locustfile.py << EOF
        from locust import HttpUser, task, between
        
        class WebsiteUser(HttpUser):
            wait_time = between(1, 3)
            
            @task
            def health_check(self):
                self.client.get("/health")
                
            @task
            def system_status(self):
                self.client.get("/api/simulation/status")
        EOF
        
        locust -f locustfile.py --host=http://localhost:5002 --users=10 --spawn-rate=2 --run-time=30s --headless
        
  # Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    name: Notify Build Status
    needs: [lint, test, integration, security, docker]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.integration.result == 'success' && needs.security.result == 'success' && needs.docker.result == 'success'
      run: |
        echo "🎉 All checks passed! Ready for deployment."
        
    - name: Notify Failure
      if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.integration.result == 'failure' || needs.security.result == 'failure' || needs.docker.result == 'failure'
      run: |
        echo "❌ Some checks failed. Please review the results."
        exit 1