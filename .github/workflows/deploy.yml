name: Deploy to Production

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    name: Build & Push Docker Image
    permissions:
      contents: read
      packages: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build
    if: github.ref == 'refs/heads/master' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.quantumtrail.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment configuration
      run: |
        # Create docker-compose override for staging
        cat > docker-compose.staging.yml << EOF
        version: '3.8'
        services:
          web:
            image: ${{ needs.build.outputs.image }}
            environment:
              - FLASK_ENV=staging
              - DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
              - REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
              - SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
              - IBMQ_TOKEN=${{ secrets.IBMQ_TOKEN }}
            ports:
              - "80:5000"
        EOF
        
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ needs.build.outputs.image }}"
        echo "Environment: staging"
        # In a real deployment, you would use tools like:
        # - kubectl apply for Kubernetes
        # - docker-compose up for Docker Compose
        # - terraform apply for infrastructure
        # - ansible-playbook for server configuration
        echo "✅ Staging deployment simulated successfully"
        
    - name: Run smoke tests
      run: |
        # Wait for deployment
        sleep 30
        
        # Run basic smoke tests
        echo "🧪 Running staging smoke tests..."
        # curl -f https://staging.quantumtrail.example.com/health || exit 1
        # curl -f https://staging.quantumtrail.example.com/api/simulation/status || exit 1
        echo "✅ Smoke tests passed"
        
    - name: Notify staging deployment
      run: |
        echo "📢 Staging deployment completed successfully!"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://quantumtrail.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create production deployment configuration
      run: |
        # Create docker-compose override for production
        cat > docker-compose.production.yml << EOF
        version: '3.8'
        services:
          web:
            image: ${{ needs.build.outputs.image }}
            environment:
              - FLASK_ENV=production
              - DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}
              - REDIS_URL=${{ secrets.PRODUCTION_REDIS_URL }}
              - SECRET_KEY=${{ secrets.PRODUCTION_SECRET_KEY }}
              - IBMQ_TOKEN=${{ secrets.IBMQ_TOKEN }}
              - SECURE_COOKIES=true
            restart: unless-stopped
            deploy:
              replicas: 3
              resources:
                limits:
                  memory: 1G
                reservations:
                  memory: 512M
        EOF
        
    - name: Database migration
      run: |
        echo "🗄️ Running database migrations..."
        # alembic upgrade head
        echo "✅ Migrations completed"
        
    - name: Blue-Green deployment
      run: |
        echo "🔄 Starting blue-green deployment..."
        echo "1. Deploying to green environment..."
        echo "2. Health checking green environment..."
        echo "3. Switching traffic to green..."
        echo "4. Stopping blue environment..."
        echo "✅ Blue-green deployment completed"
        
    - name: Run production smoke tests
      run: |
        echo "🧪 Running production smoke tests..."
        sleep 60  # Wait for full deployment
        
        # Critical path tests
        # curl -f https://quantumtrail.example.com/health || exit 1
        # curl -f https://quantumtrail.example.com/api/simulation/status || exit 1
        echo "✅ Production smoke tests passed"
        
    - name: Update monitoring
      run: |
        echo "📊 Updating monitoring dashboards..."
        echo "📈 Setting up alerts for new deployment..."
        echo "✅ Monitoring updated"
        
    - name: Notify production deployment
      run: |
        echo "🎉 Production deployment completed successfully!"
        echo "🔗 Application URL: https://quantumtrail.example.com"

  # Database Backup (Production)
  backup:
    runs-on: ubuntu-latest
    name: Database Backup
    needs: deploy-production
    if: needs.deploy-production.result == 'success'
    
    steps:
    - name: Create database backup
      run: |
        echo "💾 Creating pre-deployment database backup..."
        # pg_dump ${{ secrets.PRODUCTION_DATABASE_URL }} > backup_$(date +%Y%m%d_%H%M%S).sql
        # aws s3 cp backup_*.sql s3://quantum-trail-backups/
        echo "✅ Database backup completed"

  # Rollback (Manual trigger)
  rollback:
    runs-on: ubuntu-latest
    name: Rollback Deployment
    if: failure() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    environment:
      name: production
      
    steps:
    - name: Rollback to previous version
      run: |
        echo "⚠️ Initiating rollback procedure..."
        echo "1. Identifying previous stable version..."
        echo "2. Deploying previous version..."
        echo "3. Running health checks..."
        echo "4. Updating load balancer..."
        echo "✅ Rollback completed successfully"
        
    - name: Notify rollback
      run: |
        echo "🚨 Emergency rollback completed!"
        echo "📧 Notifying development team..."

  # Security Scan (Post-deployment)
  security-scan:
    runs-on: ubuntu-latest
    name: Post-Deployment Security Scan
    needs: deploy-production
    if: needs.deploy-production.result == 'success'
    
    steps:
    - name: Run security scan
      run: |
        echo "🔍 Running post-deployment security scan..."
        echo "🔐 Checking SSL configuration..."
        echo "🛡️ Scanning for vulnerabilities..."
        echo "📋 Generating security report..."
        echo "✅ Security scan completed"

  # Performance Tests (Production)
  performance-test:
    runs-on: ubuntu-latest
    name: Production Performance Test
    needs: deploy-production
    if: needs.deploy-production.result == 'success'
    
    steps:
    - name: Run performance tests
      run: |
        echo "⚡ Running production performance tests..."
        echo "📊 Load testing API endpoints..."
        echo "🎯 Testing quantum simulation performance..."
        echo "📈 Generating performance report..."
        echo "✅ Performance tests completed"

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "🧹 Cleaning up old Docker images..."
        echo "📦 Removing unused containers..."
        echo "🗄️ Archiving old logs..."
        echo "✅ Cleanup completed"