# Application configuration template
# Copy to .env and fill in actual values

# Flask configuration
FLASK_APP=dt_project.web_interface.app
FLASK_ENV=development
SECRET_KEY=your-secret-key-here-generate-random-32-chars

# API Keys (get your own from respective providers)
WEATHER_API_ENDPOINT=https://api.open-meteo.com/v1/forecast
GEOCODING_API_KEY=your-geocoding-api-key-here
GEOCODING_FORWARD_ENDPOINT=https://geocode.maps.co/search
GEOCODING_REVERSE_ENDPOINT=https://geocode.maps.co/reverse

# Quantum provider tokens (register at https://quantum-computing.ibm.com/)
IBMQ_TOKEN=your-ibm-quantum-token-here
QUANTUM_BACKEND=aer_simulator  # Options: aer_simulator, ibmq_qasm_simulator, ibmq_manila

# Database configuration
DATABASE_URL=sqlite:///dt_project.db
DB_POOL_SIZE=5
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30

# Redis configuration (for caching and Celery)
REDIS_URL=redis://localhost:6379/0
CACHE_TYPE=redis  # Options: redis, memory, simple
CACHE_DEFAULT_TIMEOUT=300

# Security settings
SESSION_LIFETIME=60  # minutes
RATE_LIMIT_ENABLED=true
CORS_ORIGINS=http://localhost:3000,http://localhost:5000
SECURE_COOKIES=false  # Set to true in production with HTTPS
CSRF_PROTECTION=true
JWT_SECRET_KEY=your-jwt-secret-key-here
JWT_ACCESS_TOKEN_EXPIRES=3600  # seconds

# WebSocket configuration
ENABLE_WEBSOCKET=true
WEBSOCKET_CORS_ORIGINS=*

# Monitoring
PROMETHEUS_MULTIPROC_DIR=./metrics
SENTRY_DSN=your-sentry-dsn-here  # Optional

# Celery configuration
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# Deployment settings
PORT=5000
HOST=127.0.0.1
DEBUG=true
WORKERS=4  # Gunicorn workers

# Feature flags
ENABLE_QUANTUM_FEATURES=true
ENABLE_MILITARY_SIMULATION=true
ENABLE_GRAPHQL=true
ENABLE_METRICS=true

# API Rate limits (requests per hour)
RATE_LIMIT_DEFAULT=100
RATE_LIMIT_API=1000
RATE_LIMIT_QUANTUM=10

# Logging
LOG_LEVEL=INFO  # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_FORMAT=json  # Options: json, text

# Security Note:
# NEVER commit actual API keys or tokens to version control
# Use environment variables or secure key management systems in production